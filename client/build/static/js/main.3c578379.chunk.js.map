{"version":3,"sources":["upload-button.js","App.js","serviceWorker.js","index.js"],"names":["UploadButton","fileInputRef","React","createRef","handleClick","current","click","this","props","children","loading","ref","accept","style","display","type","onChange","onUpload","Button","color","disabled","onClick","PureComponent","App","state","success","message","preview","cats","fetchCat","id","Promise","resolve","a","fetch","res","blob","catBlob","url","URL","createObjectURL","setState","prevState","fetchCats","json","cat","handleUpload","event","file","currentTarget","files","formData","FormData","append","method","body","status","reader","FileReader","onload","e","console","log","target","result","length","readAsDataURL","error","Navbar","light","NavbarBrand","href","padding","className","src","alt","maxHeight","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c578379.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport { Button } from 'reactstrap';\n\nclass UploadButton extends PureComponent {\n fileInputRef = React.createRef();\n\n handleClick = () => {\n   this.fileInputRef.current.click();\n }\n\n render() {\n   const { children, loading } = this.props;\n\n   return (\n     <div>\n       <input\n         ref={this.fileInputRef}\n         accept=\"image/*\"\n         style={{display: 'none '}}\n         type=\"file\"\n         onChange={this.props.onUpload}\n       />\n       <Button\n         color=\"primary\"\n         disabled={loading}\n         onClick={this.handleClick}\n       >\n         {children}\n       </Button>\n     </div>\n   )\n }\n}\n\nexport default UploadButton;","import React, { Component } from 'react';\nimport { Nav, NavItem, NavLink, Navbar, NavbarBrand } from 'reactstrap';\nimport UploadButton from './upload-button';\n\nclass App extends Component {\n  state = {\n    loading: false,\n    success: null,\n    message: '',\n    preview: null,\n    cats: []\n  };\n\n  componentWillMount() {\n    this.fetchCats();\n  }\n\n  fetchCat = (id) => {\n    return new Promise(async (resolve) => {\n      // fetch the cat image from our server\n      const res = await fetch(`/api/cats/${id}`);\n      const catBlob = await res.blob();\n      // create an object URL to display in an <img> element\n      const url = URL.createObjectURL(catBlob);\n      // shift the cat into state\n      this.setState(prevState => ({\n        cats: [{ id, url }, ...prevState.cats]\n      }), resolve);\n    })\n  };\n\n  fetchCats = () => {\n    this.setState({ cats: [] }, async () => {\n      const res = await fetch('/api/cats');\n      const { cats } = await res.json();\n      for (const cat of cats) {\n        await this.fetchCat(cat);\n      }\n    })\n  };\n\n  handleUpload = async (event) => {\n    const file = event.currentTarget.files[0];\n    const formData = new FormData();\n\n    // show loading spinner\n    this.setState({ loading: true, preview: null, message: '' });\n\n    // add the file to the form data\n    formData.append('image', file);\n\n    try {\n      // send the form data to our server\n      const res = await fetch('/api/upload', {\n        method: 'POST',\n        body: formData\n      });\n\n      // parse the server response as json\n      const { message } = await res.json();\n      // we should receive a 201 response if successful\n      const success = res.status === 201;\n      this.setState({ success, message });\n\n      // read the uploaded file\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        console.log(e.target.result);\n        if (success) {\n          // shift the uploaded cat onto the state\n          this.setState(prevState => ({\n            cats: [{ id: prevState.cats.length, url: e.target.result }, ...prevState.cats]\n          }));\n        } else {\n          this.setState({ preview: e.target.result });\n        }\n      }\n      reader.readAsDataURL(file);\n\n    } catch (err) {\n      console.error(err);\n    }\n\n    // hide loading spinner\n    this.setState({ loading: false });\n  };\n\n  render() {\n    const { loading, success, message, preview, cats } = this.state;\n\n    return (\n      <>\n        <Navbar color=\"light\" light>\n          <NavbarBrand href=\"/\">CatBook</NavbarBrand>\n        </Navbar>\n        <div style={{ padding: 32 }}>\n          {message && <h6>{message}</h6>}\n          {preview && (\n            <div className=\"crossed\">\n              <img src={preview} alt=\"upload preview\" style={{ maxHeight: 300 }} />\n            </div>\n          )}\n          <UploadButton\n            onUpload={this.handleUpload}\n            loading={loading} \n            success={success}\n          >\n            Upload Cat\n          </UploadButton>\n          <br />\n          <br />\n          <hr />\n          <br />\n          <h6>Recent cats:</h6>\n          <br />\n          {cats.map(cat => (\n            <div key={cat.id}>\n              <img src={cat.url} alt=\"cat\" style={{ maxHeight: 300 }} />\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}